{"version":3,"sources":["../../src/controllers/votingController.js"],"names":["config","db","api","post","req","res","Vote","findById","body","voter","voterID","status","json","message","data","votes","device","voteTime","create","error","get","q","p","result","query","find","$regex","RegExp","__v","election","party","$and","_id","length","console","log"],"mappings":"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","file":"votingController.js","sourcesContent":["import { Router } from 'express';\nimport Vote from '../models/votingModel';\nimport { validateToken } from '../middleware/accessToken';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/votes/cast' Endpoint to cast a vote\n    api.post('/cast', async (req, res) => {\n        try {\n            let voterID = await Vote.findById(req.body.voter);\n            if(voterID) return res.status(400).json({message: 'Voter has Voted Before!!!'});\n\n            let data = {\n                voter: req.body.voter,\n                votes: req.body.votes,\n                device: req.body.device,\n                voteTime: req.body.voteTime\n            }\n\n            let votes = await Vote.create(data);\n\n            if(votes) {\n                res.json({\n                    message: \"Vote Counted Successfully\",\n                    votes\n                });\n            }else{\n                return res.status(401).json({message: 'Voting not Successful!'});\n            }\n        } catch (error) {\n            return res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/votes/search' Endpoint to get an Election in the database by electionCode [Auth Required]\n    api.get('/search', async (req, res) => {\n        // validateToken(req, res);\n\n        let q,p, result;\n        try {\n            if (req.query.device) {\n                q = req.query.device;\n                result = await Vote.find({\n                    device: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    });\n\n            }else if (req.query.election && req.query.party) {\n                q = req.query.election;\n                p = req.query.party;\n                result = await Vote.find({\n                    $and: [\n                        {\"votes.election\":{$regex: new RegExp(q,'i')}},\n                        {\"votes.party\":{$regex: new RegExp(p,'i')}}\n                    ]\n                },{ __v:0, voter:0, _id:0, voteTime:0, device:0});\n\n            }else if (req.query.election) {\n                q = req.query.election;\n                result = await Vote.find({\"votes.election\":q},{ __v:0, voter:0, _id:0, voteTime:0, device:0});\n            }\n            if(result.length === 0) res.status(401).json({message: \"Election not found\"});\n            res.json(result);\n        } catch (error) {\n            console.log(error);\n            res.status(417).json({ message: \"Could not find any Election\", error});\n        }\n\n    });\n\n    // '/evoting_api/v1/votes/' Endpoint to access all Votes in the database [NO Auth Required]\n    api.get('/', async (req, res) => {\n\n        try {\n            let votes = await Vote.find({},{__v:0, voter:0, voteTime:0, device:0, _id:0});\n\n            if(votes === 0) return res.status(401).json({message: \"No Vote found\"});\n            res.json(votes);\n        } catch (error) {\n            res.status(417).json({message: \"Could not get the required data\"});\n        }\n    });\n\n    return api;\n}"]}