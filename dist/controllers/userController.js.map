{"version":3,"sources":["../../src/controllers/userController.js"],"names":["config","db","api","post","req","res","files","status","json","message","mediaFile","userProfilePicture","isValid","User","findOne","userEmail","body","existingUserEmail","phoneNumber","existingUserphone","mv","name","mediaPath","path","resolve","result","error","data","firstName","lastName","otherNames","dateOfBirth","gender","state","lga","town","maritalStatus","occupation","fingerprint","secure_url","userProfilePictureId","public_id","create","upload","console","log","get","find","users","length","id","params","findById","user","put","findByIdAndUpdate","delete","findByIdAndDelete","userVerified"],"mappings":"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","file":"userController.js","sourcesContent":["import { Router } from 'express';\nimport path from 'path';\nimport User from '../models/userModel';\nimport { validateDisplayPicture } from '../middleware/validators/fileTypeValidators';\nimport { validateToken } from '../middleware/accessToken';\nimport { addProfilePicture} from '../middleware/cloudinary';\n\nexport default ({ config, db}) => {\n    let api = Router();\n\n    // 'evoting_api/v1/users/register' Endpoint to create a new user\n    api.post('/register', async (req, res) => {\n        validateToken(req, res);\n\n        if (!req.files) return res.status(400).json({message: \"No files were uploaded\"});\n\n        let mediaFile = req.files.userProfilePicture;\n        let isValid = validateDisplayPicture(mediaFile);\n\n        if (!isValid) return res.status(400).json({message: \"Please upload a valid filetype\"});\n\n        try {\n            let existingUserEmail = await User.findOne({userEmail: req.body.userEmail});\n            // console.log(existingUserEmail);\n            if(existingUserEmail) return res.status(400).json({message: 'Email already in use'});\n\n            let existingUserphone = await User.findOne({phoneNumber: req.body.phoneNumber});\n            // console.log(existingUserphone);\n            if (existingUserphone) return res.status(400).json({message: 'Phone number already in use'});\n\n            mediaFile.mv(`./tempMedia/${mediaFile.name}`); //move the file to a temp storage\n            const mediaPath = path.resolve(`./tempMedia/${mediaFile.name}`);\n\n            let result = await addProfilePicture(mediaPath);\n            if(result.error) return res.status(503).json({message: \"Upload was not successful\"});\n\n            const data = {\n                firstName: req.body.firstName,\n                lastName: req.body.lastName,\n                otherNames: req.body.otherNames,\n                phoneNumber: req.body.phoneNumber,\n                dateOfBirth: req.body.dateOfBirth,\n                gender: req.body.gender,\n                state: req.body.state,\n                lga: req.body.lga,\n                town: req.body.town,\n                maritalStatus: req.body.maritalStatus,\n                occupation: req.body.occupation,\n                userEmail: req.body.userEmail,\n                fingerprint: req.body.fingerprint,\n                userProfilePicture: result.secure_url,\n                userProfilePictureId: result.public_id\n            }\n\n            let upload = await User.create(data);\n\n            if (!upload) return res.status(401).json({message: \"Registration was not successful\"});\n            res.json({message: 'Registration done.', upload});\n\n        } catch (error) {\n            res.status(422).json(error);\n            console.log(error);\n        }\n    });\n\n    // 'evoting_api/v1/users' Endpoint to see all users, admin only\n    api.get('/', async (req, res)=> {\n\n        validateToken(req, res);\n\n        try {\n            let users = await User.find();\n\n            if (users.length === 0) return res.status(401).json({message: \"No user found\"});\n            res.json(users);\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/users/:id' Endpoint to get a user\n    api.get('/:id', async (req, res)=> {\n\n        validateToken(req, res);\n        const id = req.params.id;\n\n        try {\n            let user = await User.findById(id);\n\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json(user);\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/users/update/:id' Endpoint to update any user parameters\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n        const id = req.params.id;\n        const {firstName,lastName,otherNames,dateOfBirth,gender,state,lga,town,maritalStatus,occupation} = req.body;\n\n        try {\n            let user = await User.findByIdAndUpdate(id, {firstName,lastName,otherNames,dateOfBirth,gender,state,lga,town,maritalStatus,occupation});\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json({message: 'Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/users/delete/:id' Endpoint to delete any user\n    api.delete('/delete/:id', async (req, res) => {\n\n        validateToken(req, res);\n\n        const id = req.params.id;\n        try {\n            let user = await User.findByIdAndDelete(id);\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json({message: 'User account deleted successfully'});\n\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/users/verify/:id' Endpoint to verify user account\n    api.put('/verify/:id', async (req, res) => {\n        const id = req.params.id;\n        try {\n            let user = await User.findByIdAndUpdate(id, {userVerified: true});\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json({message: 'User verified'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    return api;\n}"]}