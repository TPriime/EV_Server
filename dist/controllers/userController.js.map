{"version":3,"sources":["../../src/controllers/userController.js"],"names":["config","db","api","post","req","res","files","status","json","message","mediaFile","userProfilePicture","isValid","User","findOne","userID","body","existingUserID","userEmail","existingUserEmail","phoneNumber","existingUserphone","mv","name","mediaPath","path","resolve","result","error","data","firstName","lastName","otherNames","dateOfBirth","gender","state","lga","town","maritalStatus","occupation","fingerprint","userProfilePictureId","create","upload","get","find","users","length","id","params","q","query","$regex","RegExp","__v","r","p","$or","user","put","findByIdAndUpdate","delete","findByIdAndDelete"],"mappings":"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","file":"userController.js","sourcesContent":["import { Router } from 'express';\nimport path from 'path';\nimport User from '../models/userModel';\nimport { validateDisplayPicture } from '../middleware/validators/fileTypeValidators';\nimport { validateToken } from '../middleware/accessToken';\nimport { addProfilePicture} from '../middleware/cloudinary';\n\nexport default ({ config, db}) => {\n    let api = Router();\n\n    // 'evoting_api/v1/users/register' Endpoint to create a new user\n    api.post('/register', async (req, res) => {\n        validateToken(req, res);\n\n        if (!req.files) return res.status(400).json({message: \"No files were uploaded\"});\n\n        let mediaFile = req.files.userProfilePicture;\n        let isValid = validateDisplayPicture(mediaFile);\n\n        if (!isValid) return res.status(400).json({message: \"Please upload a valid filetype\"});\n\n        try {\n            let existingUserID = await User.findOne({userID: req.body.userID});\n            if(existingUserID) return res.status(400).json({message: 'userID already in use'});\n\n            let existingUserEmail = await User.findOne({userEmail: req.body.userEmail});\n            if(existingUserEmail) return res.status(400).json({message: 'Email already in use'});\n\n            let existingUserphone = await User.findOne({phoneNumber: req.body.phoneNumber});\n            if (existingUserphone) return res.status(400).json({message: 'Phone number already in use'});\n\n            mediaFile.mv(`./tempMedia/${mediaFile.name}`); //move the file to a temp storage\n            const mediaPath = path.resolve(`./tempMedia/${mediaFile.name}`);\n\n            let result = await addProfilePicture(mediaPath);\n            if(result.error) return res.status(503).json({message: \"Upload was not successful\"});\n\n            const data = {\n                userID: req.body.userID,\n                firstName: req.body.firstName,\n                lastName: req.body.lastName,\n                otherNames: req.body.otherNames,\n                phoneNumber: req.body.phoneNumber,\n                dateOfBirth: req.body.dateOfBirth,\n                gender: req.body.gender,\n                state: req.body.state,\n                lga: req.body.lga,\n                town: req.body.town,\n                maritalStatus: req.body.maritalStatus,\n                occupation: req.body.occupation,\n                userEmail: req.body.userEmail, //search param\n                fingerprint: req.body.fingerprint,\n                userProfilePicture: /* result.secure_url */mediaPath,\n                userProfilePictureId: /* result.public_id */\" \"\n            }\n\n            let upload = await User.create(data);\n\n            if (!upload) return res.status(401).json({message: \"Registration was not successful\"});\n            res.json({message: 'Registration done.', upload});\n\n        } catch (error) {\n            res.status(422).json(error);\n        }\n    });\n\n    // 'evoting_api/v1/users' Endpoint to see all users, admin only\n    api.get('/', async (req, res)=> {\n\n        validateToken(req, res);\n\n        try {\n            let users = await User.find();\n\n            if (users.length === 0) return res.status(401).json({message: \"No user found\"});\n            res.json(users);\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/users/id' Endpoint to get a user and search user included!!!\n    api.get('/:id', async (req, res)=> {\n\n        validateToken(req, res);\n        const id = req.params.id;\n        if (req.params.id === 'search') { // '/evoting_api/v1/users/search' Endpoint to get a User in the database\n            let q, result;\n            try {\n                if (req.query.userEmail) {\n                    q = req.query.userEmail;\n                    result = await User.find({\n                        userEmail: {\n                            $regex: new RegExp(q,'i')\n                        }},{\n                            __v: 0\n                        });\n                }else if (req.query.firstName) {\n                    q = req.query.firstName;\n                    result = await User.find({\n                        firstName: {\n                            $regex: new RegExp(q,'i')\n                        }},{\n                            __v: 0\n                        });\n                }else if (req.query.lastName) {\n                    q = req.query.lastName;\n                    result = await User.find({\n                        lastName: {\n                            $regex: new RegExp(q,'i')\n                        }},{\n                            __v: 0\n                        });\n                }else if (req.query.lastName && req.query.userEmail && req.query.firstName) {\n                    q = req.query.firstName;\n                    r = req.query.lastName;\n                    p = req.query.userEmail;\n                    result = await User.find({\n                        $or: [\n                            {firstName:{$regex: new RegExp(q,'i')}},\n                            {lastName:{$regex: new RegExp(r,'i')}},\n                            {userEmail:{$regex: new RegExp(p,'i')}}\n                        ]\n                    },{\n                        __v: 0\n                    });\n                }\n                if(result.length === 0) res.status(401).json({message: \"No user hdsjhsj found\"});\n                res.json(result);\n            } catch (error) {\n                res.status(417).json({ message: \"Could not find any User                                                                                                                    \"});\n            }\n        }else{\n            try {\n                let user = await User.findOne({userID: id},{__v: 0});\n\n                if (!user) return res.status(401).json({message: \"No user found\"});\n                // convertImg2Binary(user.userProfilePicture);\n\n                res.json(user);\n            } catch (error) {\n                res.status(422).json({error: \"The error\"});\n            }\n        }\n    });\n\n    // 'evoting_api/v1/users/update/:id' Endpoint to update any user parameters\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n        const id = req.params.id;\n        const {firstName,lastName,otherNames,dateOfBirth,gender,state,lga,town,maritalStatus,occupation} = req.body;\n\n        try {\n            let user = await User.findByIdAndUpdate(id, {firstName,lastName,otherNames,dateOfBirth,gender,state,lga,town,maritalStatus,occupation});\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json({message: 'Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/users/delete/:id' Endpoint to delete any user\n    api.delete('/delete/:id', async (req, res) => {\n\n        validateToken(req, res);\n\n        const id = req.params.id;\n        try {\n            let user = await User.findByIdAndDelete(id);\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json({message: 'User account deleted successfully'});\n\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    return api;\n}"]}