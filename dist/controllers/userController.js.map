{"version":3,"sources":["../../src/controllers/userController.js"],"names":["uuid4","require","config","db","api","post","req","res","files","status","json","message","mediaFile","userProfilePicture","User","findOne","cardID","body","existingCardID","userEmail","existingUserEmail","phoneNumber","existingUserphone","userid","data","userID","firstName","lastName","otherNames","dateOfBirth","gender","state","lga","maritalStatus","occupation","fingerprint","JSON","stringify","userProfilePictureId","upload","create","console","log","get","find","users","length","error","id","params","q","result","query","$regex","RegExp","__v","r","p","$or","user","_id","put","findByIdAndUpdate","delete","findByIdAndDelete"],"mappings":"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","file":"userController.js","sourcesContent":["import { Router } from 'express';\nimport User from '../models/userModel';\nimport { validateToken } from '../middleware/accessToken';\nlet uuid4 = require('uuid4');\nrequire('babel-polyfill');//////////////\n\nexport default ({ config, db}) => {\n    let api = Router();\n\n    // 'evoting_api/v1/users/register' Endpoint to create a new user\n    api.post('/register', async (req, res) => {\n        validateToken(req, res);\n\n        if (!req.files) return res.status(400).json({message: \"No files were uploaded\"});\n\n        let mediaFile = req.files.userProfilePicture;\n\n        try {\n            let existingCardID = await User.findOne({cardID: req.body.cardID});\n            if(existingCardID) return res.status(400).json({message: 'cardID already in use'});\n\n            let existingUserEmail = await User.findOne({userEmail: req.body.userEmail});\n            if(existingUserEmail) return res.status(400).json({message: 'Email already in use'});\n\n            let existingUserphone = await User.findOne({phoneNumber: req.body.phoneNumber});\n            if (existingUserphone) return res.status(400).json({message: 'Phone number already in use'});\n\n            let userid = uuid4();\n\n            const data = {\n                userID: userid,\n                cardID: req.body.cardID,\n                firstName: req.body.firstName,\n                lastName: req.body.lastName,\n                otherNames: req.body.otherNames,\n                phoneNumber: req.body.phoneNumber,\n                dateOfBirth: req.body.dateOfBirth,\n                gender: req.body.gender,\n                state: req.body.state,\n                lga: req.body.lga,\n                maritalStatus: req.body.maritalStatus,\n                occupation: req.body.occupation,\n                userEmail: req.body.userEmail,\n                fingerprint: req.body.fingerprint,\n                userProfilePicture: JSON.stringify(mediaFile.data),\n                userProfilePictureId: \" \"\n            }\n\n            let upload;\n            try {\n                upload = await User.create(data);\n            } catch(err){\n                return res.status(401).json({message: \"Registration was not successful\"});\n            }\n\n            res.json({message: 'Registration done.', upload});\n\n        } catch (error) {\n            console.log(error);\n            res.status(422).json(error);\n        }\n    });\n\n    // 'evoting_api/v1/users' Endpoint to see all users, admin only\n    api.get('/', async (req, res)=> {\n\n        validateToken(req, res);\n\n        try {\n            let users = await User.find();\n\n            if (users.length === 0) return res.status(401).json({message: \"No user found\"});\n            res.json(users);\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/users/id' Endpoint to get a user and search user included!!!\n    api.get('/:id', async (req, res)=> {\n\n        const id = req.params.id;\n        if (req.params.id === 'search') { // '/evoting_api/v1/users/search' Endpoint to get a User in the database\n            let q, result;\n            try {\n                if (req.query.userEmail) {\n                    q = req.query.userEmail;\n                    result = await User.find({\n                        userEmail: {\n                            $regex: new RegExp(q,'i')\n                        }},{\n                            __v: 0\n                        });\n                }else if (req.query.firstName) {\n                    q = req.query.firstName;\n                    result = await User.find({\n                        firstName: {\n                            $regex: new RegExp(q,'i')\n                        }},{\n                            __v: 0\n                        });\n                }else if (req.query.lastName) {\n                    q = req.query.lastName;\n                    result = await User.find({\n                        lastName: {\n                            $regex: new RegExp(q,'i')\n                        }},{\n                            __v: 0\n                        });\n                }else if (req.query.lastName && req.query.userEmail && req.query.firstName) {\n                    q = req.query.firstName;\n                    r = req.query.lastName;\n                    p = req.query.userEmail;\n                    result = await User.find({\n                        $or: [\n                            {firstName:{$regex: new RegExp(q,'i')}},\n                            {lastName:{$regex: new RegExp(r,'i')}},\n                            {userEmail:{$regex: new RegExp(p,'i')}}\n                        ]\n                    },{\n                        __v: 0\n                    });\n                }\n                if(result.length === 0) res.status(401).json({message: \"No user found\"});\n                res.json(result);\n            } catch (error) {\n                res.status(417).json({ message: \"Could not find any User                                                                                                                    \"});\n            }\n        }else{\n            try {\n                let user = await User.findOne({cardID: id},{__v: 0});\n\n                if (!user) {\n                    user = await User.findOne({_id: id},{__v: 0});\n                    if (!user) {\n                        return res.status(401).json({message: \"No user found\"});\n                    }\n                }\n\n                res.json(user);\n            } catch (error) {\n                res.status(422).json({error: \"The error\"});\n            }\n        }\n    });\n\n    // '/evoting_api/v1/users/update/:id' Endpoint to update any user parameters\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n        const id = req.params.id;\n        console.log(req.body);\n        const {firstName,lastName,otherNames,dateOfBirth,gender,state,lga,maritalStatus,occupation} = req.body;\n\n        try {\n            let user = await User.findByIdAndUpdate(id, {firstName,lastName,otherNames,dateOfBirth,gender,state,lga,maritalStatus,occupation});\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json({message: 'Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/users/delete/:id' Endpoint to delete any user\n    api.delete('/delete/:id', async (req, res) => {\n\n        validateToken(req, res);\n\n        const id = req.params.id;\n        try {\n            let user = await User.findByIdAndDelete(id);\n            if (!user) return res.status(401).json({message: \"No user found\"});\n            res.json({message: 'User account deleted successfully'});\n\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    return api;\n}\n"]}