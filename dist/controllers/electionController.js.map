{"version":3,"sources":["../../src/controllers/electionController.js"],"names":["config","db","api","post","req","res","parties","Election","findOne","electionCode","body","existingElection","status","json","message","electionParties","JSON","parse","data","electionName","electionDate","electionAvailable","create","election","get","q","result","query","electioncode","find","$regex","RegExp","__v","electionname","Date","$eq","p","$or","length","console","log","error","elections","put","id","params","findByIdAndUpdate","delete","findByIdAndDelete"],"mappings":"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","file":"electionController.js","sourcesContent":["import { Router } from 'express';\nimport Election from '../models/electionModel';\nimport { validateToken } from '../middleware/accessToken';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/elections/create' Endpoint to create a new Election [Auth Required]\n    api.post('/create', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let parties;\n            let existingElection = await Election.findOne({electionCode: req.body.electionCode});\n            if(existingElection) return res.status(400).json({message: 'Election with code already exist'});\n            if (typeof req.body.electionParties === 'string') {\n                parties = JSON.parse(req.body.electionParties);\n            }else if (typeof req.body.electionParties === 'object'){\n                parties = req.body.electionParties;\n            }\n\n            let data = {\n                electionCode: req.body.electionCode,\n                electionParties: parties,\n                electionName: req.body.electionName,\n                electionDate: req.body.electionDate,\n                electionAvailable: false\n            }\n\n            let election = await Election.create(data);\n\n            if(election) {\n                res.json({\n                    message: \"Election Created Successfully\",\n                    election\n                });\n            }else{\n                return res.status(401).json({message: 'Election not created'});\n            }\n        } catch (error) {\n            res.status(422).json(error);\n        }\n    });\n\n    // '/evoting_api/v1/elections/search' Endpoint to get an Election in the database by electionCode [Auth Required]\n    api.get('/search', async (req, res) => {\n        validateToken(req, res);\n\n        let q, result;\n        try {\n            if (req.query.electioncode) {\n                q = req.query.electioncode;\n                result = await Election.find({\n                    electionCode: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    });\n            }else if (req.query.electionname) {\n                q = req.query.electionname;\n                result = await Election.find({\n                    electionName: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    });\n\n            }else if (req.query.electionDate) {\n                q = new Date(req.query.electionDate);\n                result = await Election.find({electionDate: {$eq: q}},{__v: 0});\n\n            }else if (req.query.electionname && req.query.electioncode) {\n                q = req.query.electionname;\n                p = req.query.electioncode;\n                result = await Election.find({\n                    $or: [\n                        {electionName:{$regex: new RegExp(q,'i')}},\n                        {electionCode:{$regex: new RegExp(p,'i')}}\n                    ]\n                },{\n                    __v: 0\n                });\n            }\n            if(result.length === 0) res.status(401).json({message: \"Election not found\"});\n            res.json(result);\n        } catch (error) {\n            console.log(error);\n            res.status(417).json({ message: \"Could not find any Election\", error});\n        }\n\n    });\n\n    // '/evoting_api/v1/elections/' Endpoint to access all Elections in the database [Auth Required]\n    api.get('/', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let elections = await Election.find();\n\n            if(elections === 0) return res.status(401).json({message: \"No Election found\"});\n            res.json(elections);\n        } catch (error) {\n            res.status(417).json({message: \"Could not get Elections details\"});\n        }\n    });\n\n    // '/evoting_api/v1/elections/update/:id' Endpoint to update an election details\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        let {electionParties,electionName,electionDate,electionAvailable} = req.body;\n\n        if (typeof electionParties === 'string') {\n            electionParties = JSON.parse(electionParties);\n        }else if (typeof electionParties === 'object'){\n            electionParties = electionParties;\n        }\n\n        try {\n            let election = await Election.findByIdAndUpdate(id, {electionParties,electionName,electionDate,electionAvailable});\n            if (!election) return res.status(401).json({message: \"No election Found\"});\n            res.json({message: 'Election Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/elections/delete/:id' Endpoint to delete an election from the database [Auth Required]\n    api.delete('/delete/:id', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let election = await Election.findByIdAndDelete(req.params.id);\n\n            if(election) {\n                res.json({message: \"Election deleted successfully\"})\n            }\n        } catch (error) {\n            res.status(401).json({message: \"Election not found\"});\n        }\n    });\n\n    return api;\n}\n"]}