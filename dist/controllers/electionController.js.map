{"version":3,"sources":["../../src/controllers/electionController.js"],"names":["config","db","api","post","req","res","Election","findOne","electionCode","body","existingElection","status","json","message","parties","electionParties","data","electionName","electionDate","electionAvailable","create","election","get","q","result","query","electioncode","find","$regex","RegExp","__v","electionname","Date","$eq","p","$or","length","console","log","error","elections","put","id","params","findByIdAndUpdate","delete","findByIdAndDelete"],"mappings":"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","file":"electionController.js","sourcesContent":["import { Router } from 'express';\nimport Election from '../models/electionModel';\nimport { validateToken, checkPartiesUnique } from '../middleware/accessToken';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/elections/create' Endpoint to create a new Election [Auth Required]\n    api.post('/create', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let existingElection = await Election.findOne({electionCode: req.body.electionCode});\n            if(existingElection) return res.status(400).json({message: 'Election with code already exist'});\n            let parties = checkPartiesUnique(req.body.electionParties);\n\n            let data = {\n                electionCode: req.body.electionCode,\n                electionParties: parties,\n                electionName: req.body.electionName,\n                electionDate: req.body.electionDate,\n                electionAvailable: false\n            }\n\n            let election = await Election.create(data);\n\n            if(election) {\n                res.json({\n                    message: \"Election Created Successfully\",\n                    election\n                });\n            }else{\n                return res.status(401).json({message: 'Election not created'});\n            }\n        } catch (error) {\n            res.status(422).json(error);\n        }\n    });\n\n    // '/evoting_api/v1/elections/search' Endpoint to get an Election in the database by electionCode [Auth Required]\n    api.get('/search', async (req, res) => {\n        validateToken(req, res);\n\n        let q, result;\n        try {\n            if (req.query.electioncode) {\n                q = req.query.electioncode;\n                result = await Election.find({\n                    electionCode: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    });\n            }else if (req.query.electionname) {\n                q = req.query.electionname;\n                result = await Election.find({\n                    electionName: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    });\n\n            }else if (req.query.electionDate) {\n                q = new Date(req.query.electionDate);\n                result = await Election.find({electionDate: {$eq: q}},{__v: 0});\n\n            }else if (req.query.electionname && req.query.electioncode) {\n                q = req.query.electionname;\n                p = req.query.electioncode;\n                result = await Election.find({\n                    $or: [\n                        {electionName:{$regex: new RegExp(q,'i')}},\n                        {electionCode:{$regex: new RegExp(p,'i')}}\n                    ]\n                },{\n                    __v: 0\n                });\n            }\n            if(result.length === 0) res.status(401).json({message: \"Election not found\"});\n            res.json(result);\n        } catch (error) {\n            console.log(error);\n            res.status(417).json({ message: \"Could not find any Election\", error});\n        }\n\n    });\n\n    // '/evoting_api/v1/elections/' Endpoint to access all Elections in the database [Auth Required]\n    api.get('/', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let elections = await Election.find();\n\n            if(elections === 0) return res.status(401).json({message: \"No Election found\"});\n            res.json(elections);\n        } catch (error) {\n            res.status(417).json({message: \"Could not get Elections details\"});\n        }\n    });\n\n    // '/evoting_api/v1/elections/update/:id' Endpoint to update an election details\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        let {electionParties,electionName,electionDate,electionAvailable} = req.body;\n\n        electionParties = checkPartiesUnique(electionParties);\n\n        try {\n            let election = await Election.findByIdAndUpdate(id, {electionParties,electionName,electionDate,electionAvailable});\n            if (!election) return res.status(401).json({message: \"No election Found\"});\n            res.json({message: 'Election Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/elections/delete/:id' Endpoint to delete an election from the database [Auth Required]\n    api.delete('/delete/:id', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let election = await Election.findByIdAndDelete(req.params.id);\n\n            if(election) {\n                res.json({message: \"Election deleted successfully\"})\n            }\n        } catch (error) {\n            res.status(401).json({message: \"Election not found\"});\n        }\n    });\n\n    return api;\n}"]}