{"version":3,"sources":["../../src/controllers/electionController.js"],"names":["config","db","api","post","req","res","data","electionCode","body","electionParties","parties","electionName","electionDate","Election","create","election","json","message","status","get","findById","params","id","result","searchParam","find","elections","put","findByIdAndUpdate","error","delete","findByIdAndDelete"],"mappings":"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","file":"electionController.js","sourcesContent":["import { Router } from 'express';\nimport Election from '../models/electionModel';\nimport { validateToken } from '../middleware/accessToken';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/elections/create' Endpoint to create a new Election [Auth Required]\n    api.post('/create', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n\n            let data = {\n                electionCode: req.body.electionCode,\n                electionParties: req.body.parties,\n                electionName: req.body.electionName,\n                electionDate: req.body.electionDate\n            }\n\n            let election = await Election.create(data);\n\n            if(election) {\n                res.json({\n                    message: \"Election Created Successfully\",\n                    election\n                });\n            }\n        } catch (error) {\n            res.status(422).json(error);\n        }\n    });\n\n\n    // '/evoting_api/v1/elections/:id' Endpoint to get an Election in the database by Id [Auth Required]\n     api.get('/:id', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let result = await Election.findById(req.params.id);\n\n            if(result) {\n                res.json(result);\n            }\n        } catch (error) {\n            res.status(417).json({ message: \"Could not find requested Election\"});\n        }\n    });\n\n    // '/evoting_api/v1/elections/search/:electionCode' Endpoint to get an Election in the database by Id [Auth Required]\n    api.get('/search/:electionCode', async (req, res) => {\n        validateToken(req, res);\n\n        let searchParam = req.params.electionCode;\n\n        try {\n            let result = await Election.find({electionCode: /^searchParam/i});\n\n            if(result) {\n                res.json(result);\n            }\n        } catch (error) {\n            res.status(417).json({ message: \"Could not find any Election\"});\n        }\n    });\n\n    // '/evoting_api/v1/elections/' Endpoint to access all Elections in the database [Auth Required]\n    api.get('/', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let elections = await Election.find();\n\n            if(elections === 0) return res.status(401).json({message: \"No Election found\"});\n            res.json(elections);\n        } catch (error) {\n            res.status(417).json({message: \"Could not get Elections details\"});\n        }\n    });\n\n    // '/evoting_api/v1/elections/update/:id' Endpoint to update an election details\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        const {electionParties,electionName,electionDate} = req.body;\n\n        try {\n            let election = await Election.findByIdAndUpdate(id, {electionParties,electionName,electionDate});\n            if (!election) return res.status(401).json({message: \"No election Found\"});\n            res.json({message: 'Election Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/elections/delete/:id' Endpoint to delete an election from the database [Auth Required]\n    api.delete('/delete/:id', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let election = await Election.findByIdAndDelete(req.params.id);\n\n            if(election) {\n                res.json({message: \"Election deleted successfully\"})\n            }\n        } catch (error) {\n            res.status(401).json({message: \"Election not found\"});\n        }\n    });\n\n    return api;\n}"]}