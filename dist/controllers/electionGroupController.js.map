{"version":3,"sources":["../../src/controllers/electionGroupController.js"],"names":["config","db","api","post","req","res","ElectionGroup","findOne","groupName","body","existingGroup","status","json","message","data","groupDescription","electionDate","create","electionGroup","get","result","q","query","find","$regex","RegExp","__v","length","electiongroups","put","id","params","findByIdAndUpdate","error","delete","findByIdAndDelete"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;kBAEe,gBAAmB;AAAA,QAAhBA,MAAgB,QAAhBA,MAAgB;AAAA,QAARC,EAAQ,QAARA,EAAQ;;;AAE9B,QAAIC,MAAM,sBAAV;;AAEA;AACAA,QAAIC,IAAJ,CAAS,SAAT;AAAA,4EAAoB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAChB,4DAAcD,GAAd,EAAmBC,GAAnB;;AADgB;AAAA;AAAA,mCAIcC,6BAAcC,OAAd,CAAsB,EAACC,WAAWJ,IAAIK,IAAJ,CAASD,SAArB,EAAtB,CAJd;;AAAA;AAIRE,yCAJQ;;AAAA,iCAKTA,aALS;AAAA;AAAA;AAAA;;AAAA,6DAKaL,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,8BAAV,EAArB,CALb;;AAAA;AAORC,gCAPQ,GAOD;AACPN,2CAAWJ,IAAIK,IAAJ,CAASD,SADb;AAEPO,kDAAkBX,IAAIK,IAAJ,CAASM,gBAFpB;AAGPC,8CAAcZ,IAAIK,IAAJ,CAASO;AAHhB,6BAPC;AAAA;AAAA,mCAacV,6BAAcW,MAAd,CAAqBH,IAArB,CAbd;;AAAA;AAaRI,yCAbQ;;AAAA,iCAeTA,aAfS;AAAA;AAAA;AAAA;;AAgBRb,gCAAIO,IAAJ,CAAS;AACLC,yCAAS,qCADJ;AAELK;AAFK,6BAAT;AAhBQ;AAAA;;AAAA;AAAA,6DAqBDb,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,4BAAV,EAArB,CArBC;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAwBZR,gCAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB;;AAxBY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAApB;;AAAA;AAAA;AAAA;AAAA;;AA4BA;AACAV,QAAIiB,GAAJ,CAAQ,SAAR;AAAA,4EAAmB,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACf,4DAAcD,GAAd,EAAmBC,GAAnB;;AADe;AAIPe,kCAJO,WAICC,CAJD;;AAAA,iCAKRjB,IAAIkB,KAAJ,CAAUd,SALF;AAAA;AAAA;AAAA;;AAMPa,gCAAIjB,IAAIkB,KAAJ,CAAUd,SAAd;AANO;AAAA,mCAOQF,6BAAciB,IAAd,CAAmB;AAC9Bf,2CAAW;AACPgB,4CAAQ,IAAIC,MAAJ,CAAWJ,CAAX,EAAa,GAAb;AADD,iCADmB,EAAnB,EAGR;AACCK,qCAAK;AADN,6BAHQ,CAPR;;AAAA;AAOPN,kCAPO;AAAA;AAAA;;AAAA;AAAA,iCAcFhB,IAAIkB,KAAJ,CAAUN,YAdR;AAAA;AAAA;AAAA;;AAePK,gCAAIjB,IAAIkB,KAAJ,CAAUN,YAAd;AAfO;AAAA,mCAgBQV,6BAAciB,IAAd,CAAmB;AAC9BP,8CAAc;AACVQ,4CAAQ,IAAIC,MAAJ,CAAWJ,CAAX,EAAa,GAAb;AADE,iCADgB,EAAnB,EAGR;AACCK,qCAAK;AADN,6BAHQ,CAhBR;;AAAA;AAgBPN,kCAhBO;;AAAA;;AAyBX,gCAAGA,OAAOO,MAAP,KAAkB,CAArB,EAAwBtB,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,0BAAV,EAArB;AACxBR,gCAAIO,IAAJ,CAASQ,MAAT;AA1BW;AAAA;;AAAA;AAAA;AAAA;;AA4BXf,gCAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,8BAAX,EAArB;;AA5BW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAnB;;AAAA;AAAA;AAAA;AAAA;;AAiCA;AACAX,QAAIiB,GAAJ,CAAQ,GAAR;AAAA,4EAAa,kBAAOf,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACT,4DAAcD,GAAd,EAAmBC,GAAnB;;AADS;AAAA;AAAA,mCAIsBC,6BAAciB,IAAd,EAJtB;;AAAA;AAIDK,0CAJC;;AAAA,kCAMFA,mBAAmB,CANjB;AAAA;AAAA;AAAA;;AAAA,8DAM2BvB,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,yBAAV,EAArB,CAN3B;;AAAA;AAOLR,gCAAIO,IAAJ,CAASgB,cAAT;AAPK;AAAA;;AAAA;AAAA;AAAA;;AASLvB,gCAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,gCAAV,EAArB;;AATK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAb;;AAAA;AAAA;AAAA;AAAA;;AAaA;AACAX,QAAI2B,GAAJ,CAAQ,aAAR;AAAA,4EAAuB,kBAAOzB,GAAP,EAAYC,GAAZ;AAAA;;AAAA;AAAA;AAAA;AAAA;AACnB,4DAAcD,GAAd,EAAmBC,GAAnB;;AAEMyB,8BAHa,GAGR1B,IAAI2B,MAAJ,CAAWD,EAHH;AAAA,wCAI6B1B,IAAIK,IAJjC,EAIdD,SAJc,aAIdA,SAJc,EAIJO,gBAJI,aAIJA,gBAJI,EAIaC,YAJb,aAIaA,YAJb;AAAA;AAAA;AAAA,mCAOYV,6BAAc0B,iBAAd,CAAgCF,EAAhC,EAAoC,EAACtB,oBAAD,EAAWO,kCAAX,EAA4BC,0BAA5B,EAApC,CAPZ;;AAAA;AAOXY,0CAPW;;AAAA,gCAQVA,cARU;AAAA;AAAA;AAAA;;AAAA,8DAQavB,IAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,yBAAV,EAArB,CARb;;AAAA;AASfR,gCAAIO,IAAJ,CAAS,EAACC,SAAS,kCAAV,EAAT;AATe;AAAA;;AAAA;AAAA;AAAA;;AAWfR,gCAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACqB,mBAAD,EAArB;;AAXe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAvB;;AAAA;AAAA;AAAA;AAAA;;AAeA;AACA/B,QAAIgC,MAAJ,CAAW,aAAX;AAAA,4EAA0B,kBAAO9B,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACtB,4DAAcD,GAAd,EAAmBC,GAAnB;;AADsB;AAAA;AAAA,mCAISC,6BAAc6B,iBAAd,CAAgC/B,IAAI2B,MAAJ,CAAWD,EAA3C,CAJT;;AAAA;AAIdF,0CAJc;;;AAMlB,gCAAGA,cAAH,EAAmB;AACfvB,oCAAIO,IAAJ,CAAS,EAACC,SAAS,qCAAV,EAAT;AACH;AARiB;AAAA;;AAAA;AAAA;AAAA;;AAUlBR,gCAAIM,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,0BAAV,EAArB;;AAVkB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA1B;;AAAA;AAAA;AAAA;AAAA;;AAcA,WAAOX,GAAP;AACH,C","file":"electionGroupController.js","sourcesContent":["import { Router } from 'express';\nimport ElectionGroup from '../models/electionGroupModel';\nimport { validateToken } from '../middleware/accessToken';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/electiongroup/create' Endpoint to create a new Election [Auth Required]\n    api.post('/create', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let existingGroup = await ElectionGroup.findOne({groupName: req.body.groupName});\n            if(existingGroup) return res.status(400).json({message: 'Election Group already exist'});\n\n            let data = {\n                groupName: req.body.groupName,\n                groupDescription: req.body.groupDescription,\n                electionDate: req.body.electionDate\n            }\n\n            let electionGroup = await ElectionGroup.create(data);\n\n            if(electionGroup) {\n                res.json({\n                    message: \"Election Group Created Successfully\",\n                    electionGroup\n                });\n            }else{\n                return res.status(401).json({message: 'Election Group not created'});\n            }\n        } catch (error) {\n            res.status(422).json(error);\n        }\n    });\n\n    // '/evoting_api/v1/electiongroup/search' Endpoint to get an Election in the database by electionCode [Auth Required]\n    api.get('/search', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let result, q;\n            if(req.query.groupName){\n                q = req.query.groupName;\n                result = await ElectionGroup.find({\n                    groupName: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    }\n                );\n            }else if(req.query.electionDate){\n                q = req.query.electionDate;\n                result = await ElectionGroup.find({\n                    electionDate: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    }\n                );\n            }\n\n            if(result.length === 0) res.status(401).json({message: \"Election Group not found\"});\n            res.json(result);\n        } catch (error) {\n            res.status(417).json({ message: \"Could not find any the Group\"});\n        }\n\n    });\n\n    // '/evoting_api/v1/electiongroup/' Endpoint to access all Elections in the database [Auth Required]\n    api.get('/', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let electiongroups = await ElectionGroup.find();\n\n            if(electiongroups === 0) return res.status(401).json({message: \"No Election Group found\"});\n            res.json(electiongroups);\n        } catch (error) {\n            res.status(417).json({message: \"Could not get Elections groups\"});\n        }\n    });\n\n    // '/evoting_api/v1/electiongroup/update/:id' Endpoint to update an election details\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        let {groupName,groupDescription,electionDate} = req.body;\n\n        try {\n            let electiongroups = await ElectionGroup.findByIdAndUpdate(id, {groupName,groupDescription,electionDate});\n            if (!electiongroups) return res.status(401).json({message: \"No election group found\"});\n            res.json({message: 'Election Group Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/electiongroup/delete/:id' Endpoint to delete an election from the database [Auth Required]\n    api.delete('/delete/:id', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let electiongroups = await ElectionGroup.findByIdAndDelete(req.params.id);\n\n            if(electiongroups) {\n                res.json({message: \"Election Group deleted successfully\"})\n            }\n        } catch (error) {\n            res.status(401).json({message: \"Election Group not found\"});\n        }\n    });\n\n    return api;\n}"]}