{"version":3,"sources":["../../src/controllers/deviceController.js"],"names":["config","db","api","post","req","res","Device","findOne","deviceName","body","existingDevice","status","json","message","data","releaseDate","currentLocation","create","device","get","q","result","query","find","$regex","RegExp","__v","length","put","id","params","findByIdAndUpdate","error","delete","findByIdAndDelete"],"mappings":"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","file":"deviceController.js","sourcesContent":["import { Router } from 'express';\nimport Device from '../models/deviceModel';\nimport { validateToken } from '../middleware/accessToken';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/devices/create' Endpoint to create a new Device [Auth Required]\n    api.post('/create', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let existingDevice = await Device.findOne({deviceName: req.body.deviceName});\n            if(existingDevice) return res.status(400).json({message: 'Device already exist'});\n\n            let data = {\n              deviceName: req.body.deviceName,\n              releaseDate: req.body.releaseDate,\n              currentLocation: req.body.currentLocation || '',\n              status: req.body.status\n            }\n\n            let device = await Device.create(data);\n\n            if(device) {\n                res.json({\n                    message: \"Device Created Successfully\",\n                    device\n                });\n            }else{\n                return res.status(401).json({message: 'Device not created'});\n            }\n        } catch (error) {\n            res.status(422).json(error);\n        }\n    });\n\n    // '/evoting_api/v1/devices/search' Endpoint to get an Election in the database by electionCode [Auth Required]\n    api.get('/search', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let q, result;\n            if(req.query.deviceName){\n                q = req.query.deviceName;\n                result = await Device.find({\n                    deviceName: {\n                        $regex: new RegExp(q,'i')\n                    }},{\n                        __v: 0\n                    }\n                );\n            }else if(req.query.status){\n                q = req.query.status;\n                result = await Device.find({status: q},{__v: 0\n                    }\n                );\n            }\n\n            if(result.length === 0) res.status(401).json({message: \"Election Group not found\"});\n            res.json(result);\n        } catch (error) {\n            res.status(417).json({ message: \"Could not find any the Group\"});\n        }\n\n    });\n\n    // '/evoting_api/v1/devices/' Endpoint to access all Elections in the database [Auth Required]\n    api.get('/', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let device = await Device.find();\n\n            if(device === 0) return res.status(401).json({message: \"No Device found\"});\n            res.json(device);\n        } catch (error) {\n            res.status(417).json({message: \"Could not get any Device\"});\n        }\n    });\n\n    // '/evoting_api/v1/devices/update/:id' Endpoint to update an election details\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        let {currentLocation,status} = req.body;\n\n        try {\n            let device = await Device.findByIdAndUpdate(id, {currentLocation,status});\n            if (!device) return res.status(401).json({message: \"No Device found\"});\n            res.json({message: 'Device Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // '/evoting_api/v1/devices/delete/:id' Endpoint to delete an election from the database [Auth Required]\n    api.delete('/delete/:id', async (req, res) => {\n        validateToken(req, res);\n\n        try {\n            let device = await Device.findByIdAndDelete(req.params.id);\n\n            if(device) {\n                res.json({message: \"Device deleted successfully\"})\n            }\n        } catch (error) {\n            res.status(401).json({message: \"Device not found\"});\n        }\n    });\n\n    return api;\n}"]}