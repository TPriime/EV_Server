{"version":3,"sources":["../../src/controllers/adminController.js"],"names":["config","db","api","post","req","res","encryptedPassword","body","adminPassword","data","adminName","adminEmail","Admin","findOne","existingAdminEmails","status","json","message","create","admin","error","find","result","length","payload","id","_id","token","authenticated","adminId","get","admins","params","findById","put","findByIdAndUpdate","delete","findByIdAndDelete"],"mappings":"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","file":"adminController.js","sourcesContent":["import { Router } from 'express';\nimport Admin from '../models/adminModel';\nimport { hashPassword } from '../middleware/passwordMiddleware';\nimport { setToken, validateToken } from '../middleware/accessToken';\n\nexport default ({ config, db}) => {\n    let api = Router();\n\n    // 'evoting_api/v1/admins/register' Endpoint to create a new admin\n    api.post('/register', async (req, res) => {\n        const encryptedPassword = hashPassword(req.body.adminPassword);\n        const data = {\n            adminName: req.body.adminName,\n            adminEmail: req.body.adminEmail,\n            adminPassword: encryptedPassword,\n        }\n\n        let existingAdminEmails = await Admin.findOne({adminEmail: data.adminEmail});\n        if (existingAdminEmails) return res.status(400).json({message: 'Email already in use'});\n\n        try {\n            let admin = await Admin.create(data);\n            if (!admin) return res.status(401).json({message: \"Admin Registration was not successful\"});\n\n            res.json({message: 'Admin Registration done.', admin});\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/admins/login' Endpoint to login a admin\n    api.post('/login', async (req, res) => {\n        try {\n            let result = await Admin.find({adminEmail: req.body.adminEmail});\n\n            if (result.length === 0) return res.status(401).json({message: \"Email/Password is Incorrect\"});\n\n            for (const admin of result){\n                const encryptedPassword = hashPassword(req.body.adminPassword);\n\n                if (admin.adminPassword !== encryptedPassword) return res.status(401).json({message: \"Email/Password is Incorrect\"});\n\n                let payload = {\n                    id: admin._id\n                }\n                let token = setToken(payload);\n\n                res.json({\n                    authenticated: true,\n                    adminId: admin._id,\n                    token: token\n                })\n            }\n\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n\n    });\n\n    // 'evoting_api/v1/admins/' Endpoint to see all admins, admin only\n    api.get('/', async (req, res)=> {\n        validateToken(req, res);\n\n        try {\n            let admins = await Admin.find();\n\n            if (admins.length === 0) return res.status(401).json({message: \"No admin found\"});\n            res.json(admins);\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/admins/:id' Endpoint to see all admins, admin only\n    api.get('/:id', async (req, res)=> {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        try {\n            let admin = await Admin.findById(id);\n\n            if (!admin) return res.status(401).json({message: \"No admin found\"});\n            res.json(admin);\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/admins/update/:id' Endpoint to update any admin parameters\n    api.put('/update/:id', async (req, res) => {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        const {adminName} = req.body; //TODO: how to ensure password is not included here\n        try {\n            let admin = await Admin.findByIdAndUpdate(id, {adminName});\n            if (!admin) return res.status(401).json({message: \"No admin found\"});\n            res.json({message: 'Update successful'});\n        } catch (error){\n            res.status(422).json({error: error});\n        }\n    });\n\n    // 'evoting_api/v1/admins/delete/:id' Endpoint to delete any admin\n    api.delete('/delete/:id', async (req, res) => {\n        validateToken(req, res);\n\n        const id = req.params.id;\n        try {\n            let admin = await Admin.findByIdAndDelete(id);\n            if (!admin) return res.status(401).json({message: \"No admin found\"});\n            res.json({message: 'Admin account deleted successfully'});\n\n        } catch (error) {\n            res.status(422).json({error: error});\n        }\n    });\n\n    return api;\n}"]}