{"version":3,"sources":["../../src/controllers/userElection.js"],"names":["config","db","api","get","req","res","user_lga","params","lga","lga_data","findOne","LGA","lgaDetails","status","json","message","Election","find","$or","electionCode","FC","SD","elections","length","console","log","error"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;;;kBAEe,gBAAmB;AAAA,QAAhBA,MAAgB,QAAhBA,MAAgB;AAAA,QAARC,EAAQ,QAARA,EAAQ;;;AAE9B,QAAIC,MAAM,sBAAV;;AAEA;AACAA,QAAIC,GAAJ,CAAQ,OAAR;AAAA,4EAAiB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACPC,oCADO,GACIF,IAAIG,MAAJ,CAAWC,GADf;AAAA;AAAA;AAAA,mCAKcC,mBAASC,OAAT,CAAiB,EAACC,KAAKL,QAAN,EAAjB,CALd;;AAAA;AAKLM,sCALK;;AAAA,gCAMJA,UANI;AAAA;AAAA;AAAA;;AAAA,6DAMeP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,eAAV,EAArB,CANf;;AAAA;AAAA;AAAA,mCASaC,wBAASC,IAAT,CAAc;AAChCC,qCAAK,CACD,EAACC,cAAaP,WAAWQ,EAAzB,EADC,EAED,EAACD,cAAaP,WAAWS,EAAzB,EAFC,EAGD,EAACF,cAAa,YAAd,EAHC;AAD2B,6BAAd,CATb;;AAAA;AASLG,qCATK;;AAAA,kCAgBLA,UAAUC,MAAV,GAAmB,CAhBd;AAAA;AAAA;AAAA;;AAAA,6DAgBwBlB,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,sBAAV,EAArB,CAhBxB;;AAAA;;AAkBTV,gCAAIS,IAAJ,CAASQ,SAAT;AAlBS;AAAA;;AAAA;AAAA;AAAA;;AAoBTE,oCAAQC,GAAR;AACApB,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACY,OAAO,WAAR,EAArB;;AArBS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAjB;;AAAA;AAAA;AAAA;AAAA;;AA0BA,WAAOxB,GAAP;AACH,C","file":"userElection.js","sourcesContent":["import { Router } from 'express';\nimport lga_data from '../models/lgaModel';\nimport Election from '../models/electionModel';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/userelection/:lga' Endpoint to get voters\n    api.get('/:lga', async (req, res) => {\n        const user_lga = req.params.lga;\n        try {\n\n            // Get User LGA Details\n            let lgaDetails = await lga_data.findOne({LGA: user_lga});\n            if (!lgaDetails) return res.status(401).json({message: \"LGA not found\"});\n\n            // To get the three (3) elections\n            let elections = await Election.find({\n                $or: [\n                    {electionCode:lgaDetails.FC},\n                    {electionCode:lgaDetails.SD},\n                    {electionCode:\"PD/111/NIG\"}\n                ]\n            });\n            if (elections.length < 1) return res.status(401).json({message: \"Elections not found!\"});\n            \n            res.json(elections);\n        } catch (error) {\n            console.log(error);\n            res.status(422).json({error: \"The error\"});\n        }\n    });\n\n\n    return api;\n}"]}