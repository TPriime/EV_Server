{"version":3,"sources":["../../src/controllers/userElection.js"],"names":["config","db","api","get","req","res","id","params","User","findOne","cardID","__v","user","status","json","message","lga_data","LGA","lga","lgaDetails","Election","find","$or","electionCode","FC","SD","elections","length","output","console","log","error"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;kBAEe,gBAAmB;AAAA,QAAhBA,MAAgB,QAAhBA,MAAgB;AAAA,QAARC,EAAQ,QAARA,EAAQ;;;AAE9B,QAAIC,MAAM,sBAAV;;AAEA;AACAA,QAAIC,GAAJ,CAAQ,MAAR;AAAA,4EAAgB,iBAAOC,GAAP,EAAYC,GAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AACNC,8BADM,GACDF,IAAIG,MAAJ,CAAWD,EADV;AAAA;AAAA;AAAA,mCAGSE,oBAAKC,OAAL,CAAa,EAACC,QAAQJ,EAAT,EAAb,EAA0B,EAACK,KAAK,CAAN,EAA1B,CAHT;;AAAA;AAGJC,gCAHI;;AAAA,gCAKHA,IALG;AAAA;AAAA;AAAA;;AAAA,6DAKUP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,eAAV,EAArB,CALV;;AAAA;AAAA;AAAA,mCAQeC,mBAASP,OAAT,CAAiB,EAACQ,KAAKL,KAAKM,GAAX,EAAjB,CARf;;AAAA;AAQJC,sCARI;;AAAA,gCASHA,UATG;AAAA;AAAA;AAAA;;AAAA,6DASgBd,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,eAAV,EAArB,CAThB;;AAAA;AAAA;AAAA,mCAYcK,wBAASC,IAAT,CAAc;AAChCC,qCAAK,CACD,EAACC,cAAaJ,WAAWK,EAAzB,EADC,EAED,EAACD,cAAaJ,WAAWM,EAAzB,EAFC,EAGD,EAACF,cAAa,YAAd,EAHC;AAD2B,6BAAd,CAZd;;AAAA;AAYJG,qCAZI;;AAAA,kCAmBJA,UAAUC,MAAV,GAAmB,CAnBf;AAAA;AAAA;AAAA;;AAAA,6DAmByBtB,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,sBAAV,EAArB,CAnBzB;;AAAA;AAqBJa,kCArBI,GAqBK,EAAChB,UAAD,EAAMc,oBAAN,EArBL;;AAsBRrB,gCAAIS,IAAJ,CAASc,MAAT;AAtBQ;AAAA;;AAAA;AAAA;AAAA;;AAwBRC,oCAAQC,GAAR;AACAzB,gCAAIQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACiB,OAAO,WAAR,EAArB;;AAzBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAhB;;AAAA;AAAA;AAAA;AAAA;;AA8BA,WAAO7B,GAAP;AACH,C","file":"userElection.js","sourcesContent":["import { Router } from 'express';\nimport User from '../models/userModel';\nimport lga_data from '../models/lgaModel';\nimport Election from '../models/electionModel';\n\nexport default ({ config, db}) => {\n\n    let api = Router();\n\n    // '/evoting_api/v1/userelection/:id' Endpoint to get voters\n    api.get('/:id', async (req, res) => {\n        const id = req.params.id;\n        try {\n            let user = await User.findOne({cardID: id},{__v: 0});\n\n            if (!user) return res.status(401).json({message: \"No user found\"});\n\n            // Get User LGA Details\n            let lgaDetails = await lga_data.findOne({LGA: user.lga});\n            if (!lgaDetails) return res.status(401).json({message: \"LGA not found\"});\n\n            // To get the three (3) elections\n            let elections = await Election.find({\n                $or: [\n                    {electionCode:lgaDetails.FC},\n                    {electionCode:lgaDetails.SD},\n                    {electionCode:\"PD/111/NIG\"}\n                ]\n            });\n            if (elections.length < 1) return res.status(401).json({message: \"Elections not found!\"});\n\n            let output = {user,elections};\n            res.json(output);\n        } catch (error) {\n            console.log(error);\n            res.status(422).json({error: \"The error\"});\n        }\n    });\n\n\n    return api;\n}"]}