{"version":3,"sources":["../../src/handlers/device-handler.js"],"names":["http","require","WebsocketServer","Server","util","encrypt","decrypt","response","NODEF","port","method","LOGIN","GET","POST","wsServer","prev_id","start_server","server","server_port","on","ws","id","log","ws_send","handle_connection","msg","JSON","parse","header","reg_connection","body","title","voter_id","get_send_voter_details","fetch_send_election_data","recordVote","vote_data","socket","code","reason","get","hostname","path","data","res","chunk","user_data","_id","name","firstName","surname","lastName","othername","otherNames","gender","state","town","lga","fingerprint","image","userProfilePicture","err","console","split","user_id","user_lga","req_msg","headers","request","fetched_data","constructed_data","election","constr_data","electionName","electionCode","parties","electionParties","push","criteria","reply","election_data","error","write","stringify","end","_title","toUpperCase","key","send","getConnectedDevices","clients","module","exports"],"mappings":"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","file":"device-handler.js","sourcesContent":["'use strict'\nconst http = require('http')\nconst WebsocketServer = require('ws').Server;\nconst util = require('util');\nconst encrypt = require('./crypt').encrypt;\nconst decrypt = require('./crypt').decrypt;\nconst response = require(\"./resources/responses.js\")\nconst NODEF = 'unidentified'\n\nlet port = 8080; //dev\n\nconst method = {\n    LOGIN: 'LOGIN',\n    GET: 'GET',\n    POST: 'POST'\n}\n\n\nlet wsServer; \nlet prev_id;\n\n\nfunction start_server(server, server_port){\n    wsServer = new WebsocketServer({server});\n    port = server_port || 8080\n    \n    wsServer.on('connection', (ws)=>{\n        ws.id = ws.id || NODEF\n        log(ws, ' connected');\n        ws_send(ws, 'id')\n        handle_connection(ws);\n    });\n}\n\n\n\nfunction handle_connection(ws){\n    ws.on('message', (msg)=>{\n        msg = JSON.parse(decrypt(msg))\n\n        //process.env.VERBOSE && log(ws, `MESSAGE: ${JSON.stringify(msg)}`)\n        \n        if(ws.id===NODEF && msg.header.method===method.LOGIN) \n            return reg_connection(ws, msg.body);\n    \n        if(msg.header.method===method.GET)\n            switch(msg.header.title){\n                case 'USER_DATA':\n                    let voter_id = msg.body.msg; \n                    get_send_voter_details(ws, voter_id); break;\n\n                case 'ELECTION_DATA':\n                    fetch_send_election_data(ws, msg.body.msg); break;\n            }   \n\n        if(msg.header.method===method.POST)\n            switch(msg.header.title){\n                case 'VOTE_DATA': recordVote(ws, msg.body.vote_data)\n            }    \n    })\n    .on('close', (socket, code, reason)=>{\n        log(ws, 'closed')\n    })\n}\n\n\n\nfunction get_send_voter_details(ws, voter_id){\n    http.get({\n        hostname: 'localhost',\n        port: port,\n        path: '/evoting_api/v1/users/'+voter_id,\n    }, res=>{\n        let data = ''\n        res.on('data', chunk=>data+=chunk)\n        res.on('end', ()=>{\n            data = JSON.parse(data);\n            \n            let user_data = {};\n            user_data.id = data._id,\n            user_data.name = data.firstName,\n            user_data.surname = data.lastName,\n            user_data.othername = data.otherNames,    \n            user_data.gender = data.gender,\n            user_data.state =  data.state,\n            user_data.town = data.town,\n            user_data.lga = data.lga,\n            user_data.fingerprint = data.fingerprint\n\n            try{\n                user_data.image = JSON.parse(data.userProfilePicture)\n            } catch(err){\n                console.log(err)\n                user_data.image = {data: [255,216]}\n            }\n            \n            ws_send(ws, 'user_data', user_data)        \n        })\n    })\n}\n\n\nfunction fetch_send_election_data(ws, user_data){\n    let [user_id, user_lga] = user_data.split(\";\")\n    \n\n    let req_msg = {\n        hostname: \"localhost\",\n        port: port,\n        path: \"/evoting_api/v1/userelection/\"+user_lga,\n        method: \"GET\",\n        headers: {\n            'Content-Type': 'application/x-www-form-urlencoded'\n        }\n    }\n        \n\n    let request = http.get(req_msg, res=>{\n        let data = ''\n        res.on('data', chunk=>data+=chunk)\n        res.on('end', ()=>{\n            let fetched_data = JSON.parse(data)\n            let constructed_data = [];\n            \n            for(let election in fetched_data){\n                election = fetched_data[election];\n    \n                let constr_data = {};\n                constr_data.title = election.electionName;\n\n                constr_data.code = election.electionCode;\n                constr_data.parties = [];\n                for(let parties in election.electionParties)\n                    constr_data.parties.push(election.electionParties[parties].name)\n                constr_data.criteria = {};\n                \n                constructed_data.push(constr_data)\n            }\n            let reply = {election_data:constructed_data}\n            ws_send(ws, \"Election Data\", reply)\n        })\n        \n    })\n\n    request.on('error', error=>console.log(error))\n}\n\n\nfunction recordVote(ws, vote_data){\n    let req_msg = {\n        hostname: \"localhost\",\n        port: port,\n        path: \"/evoting_api/v1/votes/cast\",\n        method: \"POST\",\n        headers: {\n            'Content-Type': 'application/json'\n        }\n    }\n        \n\n    let request = http.request(req_msg, res=>{\n        let data = ''\n        res.on('data', chunk=>data+=chunk)\n        res.on('end', ()=>{\n            console.log(data) ////////////////////////////////////////////////////////////////\n        })\n    })\n\n    request.on('error', error=>console.log(error))\n    request.write(JSON.stringify(vote_data))\n    request.end();\n   \n    /*@debug*/log(ws, vote_data)\n}\n\n\n\nfunction reg_connection(ws, id){\n    ws.id = id.msg;\n    log(ws, 'registered');\n}\n\n\nconst ws_send = (ws, _title, msg)=>{\n    msg = {\n        header: {\n            title: (_title && _title.toUpperCase()) || null,\n            key: null\n        },\n        body: msg\n    }\n    ws.send(encrypt(JSON.stringify(msg)))\n}\n\n\n\nfunction log(ws, msg){\n    let id = ws.id\n\n    if(id!==prev_id) console.log();\n    util.log(`device-${ws.id}`, msg);\n    prev_id = id\n}\n\n\n\nfunction getConnectedDevices(){\n    return wsServer.clients\n}\n\n\nmodule.exports = {\n    start_server,\n    getConnectedDevices\n};\n\n"]}