{"version":3,"sources":["../../src/middleware/accessToken.js"],"names":["secret","setToken","payload","TOKENTIME","token","jwt","sign","expiresIn","verifyToken","accessToken","output","verify","e","decoded","validateToken","req","res","body","query","headers","status","json","message","isTokenValid","checkPartiesUnique","partiesArr","sort","a","b","name","results","i","length","push"],"mappings":";;;;;;;AAAA;;;;;;AAEA,IAAIA,SAAS,mBAAb;;AAEO,IAAMC,8BAAW,SAAXA,QAAW,CAACC,OAAD,EAAa;AACjC,QAAIC,YAAY,KAAG,EAAH,GAAM,EAAN,GAAS,EAAzB,CADiC,CACJ;AAC7B,QAAIC,QAAQC,uBAAIC,IAAJ,CAAS,EAACJ,gBAAD,EAAT,EAAoBF,MAApB,EAA4B;AACpCO,mBAAWJ;AADyB,KAA5B,CAAZ;;AAIA,WAAOC,KAAP;AACH,CAPM;;AASP,IAAMI,cAAc,SAAdA,WAAc,CAACC,WAAD,EAAiB;AACjC,QAAIC,eAAJ;AACAL,2BAAIM,MAAJ,CAAWF,WAAX,EAAwBT,MAAxB,EAAgC,UAACY,CAAD,EAAIC,OAAJ,EAAgB;AAC5C,YAAGD,CAAH,EAAM;AACFF,qBAAS,KAAT;AACH,SAFD,MAEO;AACHA,qBAAS,IAAT;AACH;AACJ,KAND;AAOA,WAAOA,MAAP;AACH,CAVD;;AAYO,IAAMI,wCAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAa;AACtC,QAAIP,cAAcM,IAAIE,IAAJ,CAASb,KAAT,IAAkBW,IAAIG,KAAJ,CAAUd,KAA5B,IAAqCW,IAAII,OAAJ,CAAY,gBAAZ,CAAvD;;AAEA,QAAG,CAACV,WAAJ,EAAiB,OAAOO,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mBAAX,EAArB,CAAP;;AAEjB,QAAIC,eAAef,YAAYC,WAAZ,CAAnB;;AAEA,QAAGc,iBAAiB,KAApB,EAA2B,OAAOP,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,wBAAX,EAArB,CAAP;AAC9B,CARM;;AAUA,IAAME,kDAAqB,SAArBA,kBAAqB,CAACC,UAAD,EAAgB;AAC9CA,iBAAaA,WAAWC,IAAX,CAAgB,UAACC,CAAD,EAAIC,CAAJ;AAAA,eAAWD,EAAEE,IAAF,GAASD,EAAEC,IAAZ,GAAoB,CAApB,GAAwB,CAAC,CAAnC;AAAA,KAAhB,CAAb;AACA,QAAIC,UAAU,EAAd;AACA,SAAK,IAAIC,IAAI,CAAb,EAAgBA,KAAKN,WAAWO,MAAX,GAAoB,CAAzC,EAA4CD,GAA5C,EAAiD;AAC7C,YAAIA,MAAMN,WAAWO,MAAX,GAAoB,CAA9B,EAAiC;AAC7BF,oBAAQG,IAAR,CAAaR,WAAWM,CAAX,CAAb;AACH,SAFD,MAEK;AACD,gBAAIN,WAAWM,IAAI,CAAf,EAAkBF,IAAlB,KAA2BJ,WAAWM,CAAX,EAAcF,IAA7C,EAAmD;AAC/CC,wBAAQG,IAAR,CAAaR,WAAWM,CAAX,CAAb;AACH;AACJ;AACJ;AACD,WAAOD,OAAP;AACH,CAbM","file":"accessToken.js","sourcesContent":["import jwt from 'jsonwebtoken';\n\nlet secret = \"theamazingevoting\";\n\nexport const setToken = (payload) => {\n    let TOKENTIME = 60*60*24*30; // expires in 30 days\n    let token = jwt.sign({payload}, secret, {\n        expiresIn: TOKENTIME\n    });\n\n    return token;\n}\n\nconst verifyToken = (accessToken) => {\n    let output;\n    jwt.verify(accessToken, secret, (e, decoded) => {\n        if(e) {\n            output = false;\n        } else {\n            output = true;\n        }\n    });\n    return output;\n}\n\nexport const validateToken = (req, res) =>{\n    let accessToken = req.body.token || req.query.token || req.headers['x-access-token'];\n\n    if(!accessToken) return res.status(407).json({ message: \"No token provided\" });\n\n    let isTokenValid = verifyToken(accessToken);\n\n    if(isTokenValid === false) return res.status(407).json({ message: \"Failed to verify token\"});\n}\n\nexport const checkPartiesUnique = (partiesArr) => {\n    partiesArr = partiesArr.sort((a, b) => (a.name > b.name) ? 1 : -1);\n    let results = [];\n    for (let i = 0; i <= partiesArr.length - 1; i++) {\n        if (i === partiesArr.length - 1) {\n            results.push(partiesArr[i]);\n        }else{\n            if (partiesArr[i + 1].name !== partiesArr[i].name) {\n                results.push(partiesArr[i]);\n            }\n        }\n    }\n    return results;\n}"]}