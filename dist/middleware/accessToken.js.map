{"version":3,"sources":["../../src/middleware/accessToken.js"],"names":["setToken","payload","TOKENTIME","token","jwt","sign","config","secret","expiresIn","verifyToken","accessToken","output","verify","e","decoded","validateToken","req","res","body","query","headers","status","json","message","isTokenValid"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,IAAMA,8BAAW,SAAXA,QAAW,CAACC,OAAD,EAAa;AACjC,QAAIC,YAAY,KAAG,EAAH,GAAM,EAAN,GAAS,EAAzB,CADiC,CACJ;AAC7B,QAAIC,QAAQC,uBAAIC,IAAJ,CAAS,EAACJ,gBAAD,EAAT,EAAoBK,iBAAOC,MAA3B,EAAmC;AAC3CC,mBAAWN;AADgC,KAAnC,CAAZ;;AAIA,WAAOC,KAAP;AACH,CAPM;;AASP,IAAMM,cAAc,SAAdA,WAAc,CAACC,WAAD,EAAiB;AACjC,QAAIC,eAAJ;AACAP,2BAAIQ,MAAJ,CAAWF,WAAX,EAAwBJ,iBAAOC,MAA/B,EAAuC,UAACM,CAAD,EAAIC,OAAJ,EAAgB;AACnD,YAAGD,CAAH,EAAM;AACFF,qBAAS,KAAT;AACH,SAFD,MAEO;AACHA,qBAAS,IAAT;AACH;AACJ,KAND;;AAQA,WAAOA,MAAP;AACH,CAXD;AAYO,IAAMI,wCAAgB,SAAhBA,aAAgB,CAACC,GAAD,EAAMC,GAAN,EAAa;AACtC,QAAIP,cAAcM,IAAIE,IAAJ,CAASf,KAAT,IAAkBa,IAAIG,KAAJ,CAAUhB,KAA5B,IAAqCa,IAAII,OAAJ,CAAY,gBAAZ,CAAvD;;AAEA,QAAG,CAACV,WAAJ,EAAiB,OAAOO,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,mBAAX,EAArB,CAAP;;AAEjB,QAAIC,eAAef,YAAYC,WAAZ,CAAnB;;AAEA,QAAGc,iBAAiB,KAApB,EAA2B,OAAOP,IAAII,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEC,SAAS,wBAAX,EAArB,CAAP;AAC9B,CARM","file":"accessToken.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport expressJwt from 'express-jwt';\nimport config from '../config';\n\nexport const setToken = (payload) => {\n    let TOKENTIME = 60*60*24*30; // expires in 30 days\n    let token = jwt.sign({payload}, config.secret, {\n        expiresIn: TOKENTIME\n    });\n\n    return token;\n}\n\nconst verifyToken = (accessToken) => {\n    let output;\n    jwt.verify(accessToken, config.secret, (e, decoded) => {\n        if(e) {\n            output = false;\n        } else {\n            output = true;\n        }\n    });\n\n    return output;\n}\nexport const validateToken = (req, res) =>{\n    let accessToken = req.body.token || req.query.token || req.headers['x-access-token'];\n\n    if(!accessToken) return res.status(407).json({ message: \"No token provided\" });\n\n    let isTokenValid = verifyToken(accessToken);\n\n    if(isTokenValid === false) return res.status(407).json({ message: \"Failed to verify token\"});\n}"]}