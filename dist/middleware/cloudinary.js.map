{"version":3,"sources":["../../src/middleware/cloudinary.js"],"names":["cloudinary","config","cloud_name","env","api_key","api_secret","addProfilePicture","filename","uploader","upload","resource_type","folder","use_filename","message","error","deleteImage","publicId","destroy"],"mappings":";;;;;;;AAAA;;;;AACA;;;;;;;;AAEAA,qBAAWC,MAAX,CAAkB;AACdC,gBAAYC,cAAID,UADF;AAEdE,aAASD,cAAIC,OAFC;AAGdC,gBAAYF,cAAIE;AAHF,CAAlB;;AAMA;AACO,IAAMC;AAAA,uEAAoB,iBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEFP,qBAAWQ,QAAX,CAAoBC,MAApB,CAA2BF,QAA3B,EACf,EAACG,eAAe,OAAhB,EAAwBC,QAAQ,iBAAhC,EAAmDC,cAAc,IAAjE,EADe,CAFE;;AAAA;AAEjBH,8BAFiB;AAAA,yDAIdA,MAJc;;AAAA;AAAA;AAAA;AAAA,yDAMd;AACHI,qCAAS,wBADN;AAEHC;AAFG,yBANc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAApB;;AAAA;AAAA;AAAA;AAAA,GAAN;;AAaI,IAAMC;AAAA,wEAAc,kBAAOC,QAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+BAEAhB,qBAAWQ,QAAX,CAAoBS,OAApB,CAA4BD,QAA5B,EACf,EAACN,eAAe,OAAhB,EADe,CAFA;;AAAA;AAEfD,8BAFe;AAAA,0DAIZA,MAJY;;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAd;;AAAA;AAAA;AAAA;AAAA,GAAN","file":"cloudinary.js","sourcesContent":["import cloudinary from 'cloudinary';\nimport env from '../middleware/ENV.json';\n\ncloudinary.config({\n    cloud_name: env.cloud_name,\n    api_key: env.api_key,\n    api_secret: env.api_secret,\n  });\n\n//async/await is used here to ensure that file uploads before the next function happens\nexport const addProfilePicture = async (filename) => {\n        try {\n            let upload = await cloudinary.uploader.upload(filename,\n                {resource_type: \"image\",folder: \"ProfilePictures\", use_filename: true});\n            return upload;\n        } catch (error) {\n            return {\n                message: \"Could not upload image\",\n                error\n            };\n        }\n    };\n\n    export const deleteImage = async (publicId) => {\n        try {\n            let upload = await cloudinary.uploader.destroy(publicId,\n                {resource_type: \"image\"});\n            return upload;\n        } catch (error) {\n            return error;\n        }\n    }"]}